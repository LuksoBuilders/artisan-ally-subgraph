// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Follow extends ethereum.Event {
  get params(): Follow__Params {
    return new Follow__Params(this);
  }
}

export class Follow__Params {
  _event: Follow;

  constructor(event: Follow) {
    this._event = event;
  }

  get follower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Unfollow extends ethereum.Event {
  get params(): Unfollow__Params {
    return new Unfollow__Params(this);
  }
}

export class Unfollow__Params {
  _event: Unfollow;

  constructor(event: Unfollow) {
    this._event = event;
  }

  get unfollower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FollowRegistry extends ethereum.SmartContract {
  static bind(address: Address): FollowRegistry {
    return new FollowRegistry("FollowRegistry", address);
  }

  followerCount(addr: Address): BigInt {
    let result = super.call(
      "followerCount",
      "followerCount(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigInt();
  }

  try_followerCount(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "followerCount",
      "followerCount(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  followingCount(addr: Address): BigInt {
    let result = super.call(
      "followingCount",
      "followingCount(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigInt();
  }

  try_followingCount(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "followingCount",
      "followingCount(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFollowersByIndex(
    addr: Address,
    startIndex: BigInt,
    endIndex: BigInt
  ): Array<Address> {
    let result = super.call(
      "getFollowersByIndex",
      "getFollowersByIndex(address,uint256,uint256):(address[])",
      [
        ethereum.Value.fromAddress(addr),
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getFollowersByIndex(
    addr: Address,
    startIndex: BigInt,
    endIndex: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getFollowersByIndex",
      "getFollowersByIndex(address,uint256,uint256):(address[])",
      [
        ethereum.Value.fromAddress(addr),
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getFollowsByIndex(
    addr: Address,
    startIndex: BigInt,
    endIndex: BigInt
  ): Array<Address> {
    let result = super.call(
      "getFollowsByIndex",
      "getFollowsByIndex(address,uint256,uint256):(address[])",
      [
        ethereum.Value.fromAddress(addr),
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getFollowsByIndex(
    addr: Address,
    startIndex: BigInt,
    endIndex: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getFollowsByIndex",
      "getFollowsByIndex(address,uint256,uint256):(address[])",
      [
        ethereum.Value.fromAddress(addr),
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  isFollowing(follower: Address, addr: Address): boolean {
    let result = super.call(
      "isFollowing",
      "isFollowing(address,address):(bool)",
      [ethereum.Value.fromAddress(follower), ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBoolean();
  }

  try_isFollowing(
    follower: Address,
    addr: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isFollowing",
      "isFollowing(address,address):(bool)",
      [ethereum.Value.fromAddress(follower), ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class FollowCall extends ethereum.Call {
  get inputs(): FollowCall__Inputs {
    return new FollowCall__Inputs(this);
  }

  get outputs(): FollowCall__Outputs {
    return new FollowCall__Outputs(this);
  }
}

export class FollowCall__Inputs {
  _call: FollowCall;

  constructor(call: FollowCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class FollowCall__Outputs {
  _call: FollowCall;

  constructor(call: FollowCall) {
    this._call = call;
  }
}

export class FollowBatchCall extends ethereum.Call {
  get inputs(): FollowBatchCall__Inputs {
    return new FollowBatchCall__Inputs(this);
  }

  get outputs(): FollowBatchCall__Outputs {
    return new FollowBatchCall__Outputs(this);
  }
}

export class FollowBatchCall__Inputs {
  _call: FollowBatchCall;

  constructor(call: FollowBatchCall) {
    this._call = call;
  }

  get addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class FollowBatchCall__Outputs {
  _call: FollowBatchCall;

  constructor(call: FollowBatchCall) {
    this._call = call;
  }
}

export class UnfollowCall extends ethereum.Call {
  get inputs(): UnfollowCall__Inputs {
    return new UnfollowCall__Inputs(this);
  }

  get outputs(): UnfollowCall__Outputs {
    return new UnfollowCall__Outputs(this);
  }
}

export class UnfollowCall__Inputs {
  _call: UnfollowCall;

  constructor(call: UnfollowCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnfollowCall__Outputs {
  _call: UnfollowCall;

  constructor(call: UnfollowCall) {
    this._call = call;
  }
}

export class UnfollowBatchCall extends ethereum.Call {
  get inputs(): UnfollowBatchCall__Inputs {
    return new UnfollowBatchCall__Inputs(this);
  }

  get outputs(): UnfollowBatchCall__Outputs {
    return new UnfollowBatchCall__Outputs(this);
  }
}

export class UnfollowBatchCall__Inputs {
  _call: UnfollowBatchCall;

  constructor(call: UnfollowBatchCall) {
    this._call = call;
  }

  get addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class UnfollowBatchCall__Outputs {
  _call: UnfollowBatchCall;

  constructor(call: UnfollowBatchCall) {
    this._call = call;
  }
}
