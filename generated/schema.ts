// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BotBid extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BotBid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type BotBid must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BotBid", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): BotBid | null {
    return changetype<BotBid | null>(
      store.get_in_block("BotBid", id.toHexString())
    );
  }

  static load(id: Bytes): BotBid | null {
    return changetype<BotBid | null>(store.get("BotBid", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get maxPrice(): BigInt {
    let value = this.get("maxPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxPrice(value: BigInt) {
    this.set("maxPrice", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type User must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): User | null {
    return changetype<User | null>(
      store.get_in_block("User", id.toHexString())
    );
  }

  static load(id: Bytes): User | null {
    return changetype<User | null>(store.get("User", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get fellowships(): FellowshipLoader {
    return new FellowshipLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "fellowships"
    );
  }

  get deities(): DeityLoader {
    return new DeityLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "deities"
    );
  }

  get backerBucks(): BackerBuckLoader {
    return new BackerBuckLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "backerBucks"
    );
  }

  get contributions(): ContributionLoader {
    return new ContributionLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "contributions"
    );
  }

  get endorsements(): EndorsementLoader {
    return new EndorsementLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "endorsements"
    );
  }

  get endorseds(): EndorsementLoader {
    return new EndorsementLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "endorseds"
    );
  }

  get holyShitsBalance(): BigInt {
    let value = this.get("holyShitsBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set holyShitsBalance(value: BigInt) {
    this.set("holyShitsBalance", Value.fromBigInt(value));
  }

  get steloBalance(): BigInt {
    let value = this.get("steloBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set steloBalance(value: BigInt) {
    this.set("steloBalance", Value.fromBigInt(value));
  }

  get bid(): Bytes | null {
    let value = this.get("bid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set bid(value: Bytes | null) {
    if (!value) {
      this.unset("bid");
    } else {
      this.set("bid", Value.fromBytes(<Bytes>value));
    }
  }
}

export class GlobalVars extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalVars entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type GlobalVars must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GlobalVars", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): GlobalVars | null {
    return changetype<GlobalVars | null>(
      store.get_in_block("GlobalVars", id.toHexString())
    );
  }

  static load(id: Bytes): GlobalVars | null {
    return changetype<GlobalVars | null>(
      store.get("GlobalVars", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get totalFeeCollected(): BigInt {
    let value = this.get("totalFeeCollected");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalFeeCollected(value: BigInt) {
    this.set("totalFeeCollected", Value.fromBigInt(value));
  }

  get totalRaisedAmount(): BigInt {
    let value = this.get("totalRaisedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRaisedAmount(value: BigInt) {
    this.set("totalRaisedAmount", Value.fromBigInt(value));
  }

  get divineDungDepotBalance(): BigInt {
    let value = this.get("divineDungDepotBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set divineDungDepotBalance(value: BigInt) {
    this.set("divineDungDepotBalance", Value.fromBigInt(value));
  }
}

export class FellowshipPrices extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FellowshipPrices entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FellowshipPrices must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FellowshipPrices", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): FellowshipPrices | null {
    return changetype<FellowshipPrices | null>(
      store.get_in_block("FellowshipPrices", id.toHexString())
    );
  }

  static load(id: Bytes): FellowshipPrices | null {
    return changetype<FellowshipPrices | null>(
      store.get("FellowshipPrices", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get initialPrice(): BigInt {
    let value = this.get("initialPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set initialPrice(value: BigInt) {
    this.set("initialPrice", Value.fromBigInt(value));
  }

  get initialGrowthFactor(): BigInt {
    let value = this.get("initialGrowthFactor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set initialGrowthFactor(value: BigInt) {
    this.set("initialGrowthFactor", Value.fromBigInt(value));
  }

  get eventualGrowthFactor(): BigInt {
    let value = this.get("eventualGrowthFactor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set eventualGrowthFactor(value: BigInt) {
    this.set("eventualGrowthFactor", Value.fromBigInt(value));
  }

  get diminishingFactor(): BigInt {
    let value = this.get("diminishingFactor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set diminishingFactor(value: BigInt) {
    this.set("diminishingFactor", Value.fromBigInt(value));
  }
}

export class Fellowship extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Fellowship entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Fellowship must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Fellowship", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Fellowship | null {
    return changetype<Fellowship | null>(
      store.get_in_block("Fellowship", id.toHexString())
    );
  }

  static load(id: Bytes): Fellowship | null {
    return changetype<Fellowship | null>(
      store.get("Fellowship", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get metadata(): Bytes | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set metadata(value: Bytes | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromBytes(<Bytes>value));
    }
  }

  get contributionAddress(): Bytes | null {
    let value = this.get("contributionAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set contributionAddress(value: Bytes | null) {
    if (!value) {
      this.unset("contributionAddress");
    } else {
      this.set("contributionAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get contributionAmount(): BigInt {
    let value = this.get("contributionAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set contributionAmount(value: BigInt) {
    this.set("contributionAmount", Value.fromBigInt(value));
  }

  get endorsementAddress(): Bytes | null {
    let value = this.get("endorsementAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set endorsementAddress(value: Bytes | null) {
    if (!value) {
      this.unset("endorsementAddress");
    } else {
      this.set("endorsementAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get endorsementAmount(): BigInt {
    let value = this.get("endorsementAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endorsementAmount(value: BigInt) {
    this.set("endorsementAmount", Value.fromBigInt(value));
  }

  get priceGrowth(): BigInt | null {
    let value = this.get("priceGrowth");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set priceGrowth(value: BigInt | null) {
    if (!value) {
      this.unset("priceGrowth");
    } else {
      this.set("priceGrowth", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialPrice(): BigInt | null {
    let value = this.get("initialPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initialPrice(value: BigInt | null) {
    if (!value) {
      this.unset("initialPrice");
    } else {
      this.set("initialPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get currentPrice(): BigInt | null {
    let value = this.get("currentPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set currentPrice(value: BigInt | null) {
    if (!value) {
      this.unset("currentPrice");
    } else {
      this.set("currentPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get backerBucks(): BackerBuckLoader {
    return new BackerBuckLoader(
      "Fellowship",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "backerBucks"
    );
  }

  get contributions(): ContributionLoader {
    return new ContributionLoader(
      "Fellowship",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "contributions"
    );
  }

  get endorsements(): EndorsementLoader {
    return new EndorsementLoader(
      "Fellowship",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "endorsements"
    );
  }

  get founder(): Bytes | null {
    let value = this.get("founder");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set founder(value: Bytes | null) {
    if (!value) {
      this.unset("founder");
    } else {
      this.set("founder", Value.fromBytes(<Bytes>value));
    }
  }

  get artisan(): Bytes | null {
    let value = this.get("artisan");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set artisan(value: Bytes | null) {
    if (!value) {
      this.unset("artisan");
    } else {
      this.set("artisan", Value.fromBytes(<Bytes>value));
    }
  }

  get raisedAmount(): BigInt {
    let value = this.get("raisedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set raisedAmount(value: BigInt) {
    this.set("raisedAmount", Value.fromBigInt(value));
  }

  get version(): BigInt {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set version(value: BigInt) {
    this.set("version", Value.fromBigInt(value));
  }

  get prices(): Bytes | null {
    let value = this.get("prices");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set prices(value: Bytes | null) {
    if (!value) {
      this.unset("prices");
    } else {
      this.set("prices", Value.fromBytes(<Bytes>value));
    }
  }
}

export class SystemFeeAtomCollected extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SystemFeeAtomCollected entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SystemFeeAtomCollected must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SystemFeeAtomCollected", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SystemFeeAtomCollected | null {
    return changetype<SystemFeeAtomCollected | null>(
      store.get_in_block("SystemFeeAtomCollected", id.toHexString())
    );
  }

  static load(id: Bytes): SystemFeeAtomCollected | null {
    return changetype<SystemFeeAtomCollected | null>(
      store.get("SystemFeeAtomCollected", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class UnkownEntity extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UnkownEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UnkownEntity must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UnkownEntity", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UnkownEntity | null {
    return changetype<UnkownEntity | null>(
      store.get_in_block("UnkownEntity", id.toHexString())
    );
  }

  static load(id: Bytes): UnkownEntity | null {
    return changetype<UnkownEntity | null>(
      store.get("UnkownEntity", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get number(): BigInt {
    let value = this.get("number");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set number(value: BigInt) {
    this.set("number", Value.fromBigInt(value));
  }
}

export class Deity extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Deity must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Deity", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Deity | null {
    return changetype<Deity | null>(
      store.get_in_block("Deity", id.toHexString())
    );
  }

  static load(id: Bytes): Deity | null {
    return changetype<Deity | null>(store.get("Deity", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get systemFeeAtomCollected(): Bytes {
    let value = this.get("systemFeeAtomCollected");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set systemFeeAtomCollected(value: Bytes) {
    this.set("systemFeeAtomCollected", Value.fromBytes(value));
  }

  get tokenIdNumber(): BigInt {
    let value = this.get("tokenIdNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenIdNumber(value: BigInt) {
    this.set("tokenIdNumber", Value.fromBigInt(value));
  }

  get metadata(): Bytes | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set metadata(value: Bytes | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromBytes(<Bytes>value));
    }
  }

  get xp(): BigInt {
    let value = this.get("xp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set xp(value: BigInt) {
    this.set("xp", Value.fromBigInt(value));
  }

  get level(): BigInt {
    let value = this.get("level");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set level(value: BigInt) {
    this.set("level", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get withdrawable(): BigInt {
    let value = this.get("withdrawable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set withdrawable(value: BigInt) {
    this.set("withdrawable", Value.fromBigInt(value));
  }

  get directFee(): BigInt {
    let value = this.get("directFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set directFee(value: BigInt) {
    this.set("directFee", Value.fromBigInt(value));
  }

  get harvested(): BigInt {
    let value = this.get("harvested");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set harvested(value: BigInt) {
    this.set("harvested", Value.fromBigInt(value));
  }

  get tier(): string {
    let value = this.get("tier");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tier(value: string) {
    this.set("tier", Value.fromString(value));
  }

  get slots(): SlotLoader {
    return new SlotLoader(
      "Deity",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "slots"
    );
  }

  get portfolio(): FellowshipLoader {
    return new FellowshipLoader(
      "Deity",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "portfolio"
    );
  }
}

export class BackerBuck extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BackerBuck entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type BackerBuck must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BackerBuck", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): BackerBuck | null {
    return changetype<BackerBuck | null>(
      store.get_in_block("BackerBuck", id.toHexString())
    );
  }

  static load(id: Bytes): BackerBuck | null {
    return changetype<BackerBuck | null>(
      store.get("BackerBuck", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get fellowship(): Bytes {
    let value = this.get("fellowship");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set fellowship(value: Bytes) {
    this.set("fellowship", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get contributions(): BigInt {
    let value = this.get("contributions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set contributions(value: BigInt) {
    this.set("contributions", Value.fromBigInt(value));
  }

  get purifiable(): BigInt {
    let value = this.get("purifiable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set purifiable(value: BigInt) {
    this.set("purifiable", Value.fromBigInt(value));
  }
}

export class Contribution extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Contribution entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Contribution must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Contribution", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Contribution | null {
    return changetype<Contribution | null>(
      store.get_in_block("Contribution", id.toHexString())
    );
  }

  static load(id: Bytes): Contribution | null {
    return changetype<Contribution | null>(
      store.get("Contribution", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get contributor(): Bytes {
    let value = this.get("contributor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contributor(value: Bytes) {
    this.set("contributor", Value.fromBytes(value));
  }

  get fellowship(): Bytes {
    let value = this.get("fellowship");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set fellowship(value: Bytes) {
    this.set("fellowship", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get purifiable(): BigInt {
    let value = this.get("purifiable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set purifiable(value: BigInt) {
    this.set("purifiable", Value.fromBigInt(value));
  }
}

export class Endorsement extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Endorsement entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Endorsement must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Endorsement", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Endorsement | null {
    return changetype<Endorsement | null>(
      store.get_in_block("Endorsement", id.toHexString())
    );
  }

  static load(id: Bytes): Endorsement | null {
    return changetype<Endorsement | null>(
      store.get("Endorsement", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get fellowship(): Bytes {
    let value = this.get("fellowship");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set fellowship(value: Bytes) {
    this.set("fellowship", Value.fromBytes(value));
  }

  get endorser(): Bytes {
    let value = this.get("endorser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endorser(value: Bytes) {
    this.set("endorser", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Slot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Slot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Slot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Slot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Slot | null {
    return changetype<Slot | null>(
      store.get_in_block("Slot", id.toHexString())
    );
  }

  static load(id: Bytes): Slot | null {
    return changetype<Slot | null>(store.get("Slot", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get deity(): Bytes {
    let value = this.get("deity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set deity(value: Bytes) {
    this.set("deity", Value.fromBytes(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get usedAt(): BigInt {
    let value = this.get("usedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usedAt(value: BigInt) {
    this.set("usedAt", Value.fromBigInt(value));
  }
}

export class FellowshipLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Fellowship[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Fellowship[]>(value);
  }
}

export class DeityLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Deity[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Deity[]>(value);
  }
}

export class BackerBuckLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): BackerBuck[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<BackerBuck[]>(value);
  }
}

export class ContributionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Contribution[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Contribution[]>(value);
  }
}

export class EndorsementLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Endorsement[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Endorsement[]>(value);
  }
}

export class SlotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Slot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Slot[]>(value);
  }
}
