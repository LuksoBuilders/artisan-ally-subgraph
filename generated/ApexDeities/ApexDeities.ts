// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DataChanged extends ethereum.Event {
  get params(): DataChanged__Params {
    return new DataChanged__Params(this);
  }
}

export class DataChanged__Params {
  _event: DataChanged;

  constructor(event: DataChanged) {
    this._event = event;
  }

  get dataKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dataValue(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class OperatorAuthorizationChanged extends ethereum.Event {
  get params(): OperatorAuthorizationChanged__Params {
    return new OperatorAuthorizationChanged__Params(this);
  }
}

export class OperatorAuthorizationChanged__Params {
  _event: OperatorAuthorizationChanged;

  constructor(event: OperatorAuthorizationChanged) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get operatorNotificationData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class OperatorRevoked extends ethereum.Event {
  get params(): OperatorRevoked__Params {
    return new OperatorRevoked__Params(this);
  }
}

export class OperatorRevoked__Params {
  _event: OperatorRevoked;

  constructor(event: OperatorRevoked) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get notified(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get operatorNotificationData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenIdDataChanged extends ethereum.Event {
  get params(): TokenIdDataChanged__Params {
    return new TokenIdDataChanged__Params(this);
  }
}

export class TokenIdDataChanged__Params {
  _event: TokenIdDataChanged;

  constructor(event: TokenIdDataChanged) {
    this._event = event;
  }

  get tokenId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dataKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get dataValue(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get force(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get data(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class Withdrawal extends ethereum.Event {
  get params(): Withdrawal__Params {
    return new Withdrawal__Params(this);
  }
}

export class Withdrawal__Params {
  _event: Withdrawal;

  constructor(event: Withdrawal) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ApexDeities__getOrderPriceInputOrderStruct extends ethereum.Tuple {
  get sTierAmount(): i32 {
    return this[0].toI32();
  }

  get aTierAmount(): i32 {
    return this[1].toI32();
  }

  get bTierAmount(): i32 {
    return this[2].toI32();
  }

  get cTierAmount(): i32 {
    return this[3].toI32();
  }
}

export class ApexDeities extends ethereum.SmartContract {
  static bind(address: Address): ApexDeities {
    return new ApexDeities("ApexDeities", address);
  }

  A_TIER_PRICE(): BigInt {
    let result = super.call("A_TIER_PRICE", "A_TIER_PRICE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_A_TIER_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("A_TIER_PRICE", "A_TIER_PRICE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  A_TIER_START(): BigInt {
    let result = super.call("A_TIER_START", "A_TIER_START():(uint256)", []);

    return result[0].toBigInt();
  }

  try_A_TIER_START(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("A_TIER_START", "A_TIER_START():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  A_TIER_SUPPLY(): BigInt {
    let result = super.call("A_TIER_SUPPLY", "A_TIER_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_A_TIER_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "A_TIER_SUPPLY",
      "A_TIER_SUPPLY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BASE_PRICE(): BigInt {
    let result = super.call("BASE_PRICE", "BASE_PRICE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASE_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASE_PRICE", "BASE_PRICE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  B_TIER_PRICE(): BigInt {
    let result = super.call("B_TIER_PRICE", "B_TIER_PRICE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_B_TIER_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("B_TIER_PRICE", "B_TIER_PRICE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  B_TIER_START(): BigInt {
    let result = super.call("B_TIER_START", "B_TIER_START():(uint256)", []);

    return result[0].toBigInt();
  }

  try_B_TIER_START(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("B_TIER_START", "B_TIER_START():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  B_TIER_SUPPLY(): BigInt {
    let result = super.call("B_TIER_SUPPLY", "B_TIER_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_B_TIER_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "B_TIER_SUPPLY",
      "B_TIER_SUPPLY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  C_TIER_PRICE(): BigInt {
    let result = super.call("C_TIER_PRICE", "C_TIER_PRICE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_C_TIER_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("C_TIER_PRICE", "C_TIER_PRICE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  C_TIER_START(): BigInt {
    let result = super.call("C_TIER_START", "C_TIER_START():(uint256)", []);

    return result[0].toBigInt();
  }

  try_C_TIER_START(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("C_TIER_START", "C_TIER_START():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  C_TIER_SUPPLY(): BigInt {
    let result = super.call("C_TIER_SUPPLY", "C_TIER_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_C_TIER_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "C_TIER_SUPPLY",
      "C_TIER_SUPPLY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_SUPPLY(): BigInt {
    let result = super.call("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  S_TIER_PRICE(): BigInt {
    let result = super.call("S_TIER_PRICE", "S_TIER_PRICE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_S_TIER_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("S_TIER_PRICE", "S_TIER_PRICE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  S_TIER_START(): BigInt {
    let result = super.call("S_TIER_START", "S_TIER_START():(uint256)", []);

    return result[0].toBigInt();
  }

  try_S_TIER_START(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("S_TIER_START", "S_TIER_START():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  S_TIER_SUPPLY(): BigInt {
    let result = super.call("S_TIER_SUPPLY", "S_TIER_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_S_TIER_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "S_TIER_SUPPLY",
      "S_TIER_SUPPLY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aTierMinted(): BigInt {
    let result = super.call("aTierMinted", "aTierMinted():(uint256)", []);

    return result[0].toBigInt();
  }

  try_aTierMinted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("aTierMinted", "aTierMinted():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bTierMinted(): BigInt {
    let result = super.call("bTierMinted", "bTierMinted():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bTierMinted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bTierMinted", "bTierMinted():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(tokenOwner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(tokenOwner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(tokenOwner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(tokenOwner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  batchCalls(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("batchCalls", "batchCalls(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_batchCalls(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("batchCalls", "batchCalls(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  cTierMinted(): BigInt {
    let result = super.call("cTierMinted", "cTierMinted():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cTierMinted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cTierMinted", "cTierMinted():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getData(dataKey: Bytes): Bytes {
    let result = super.call("getData", "getData(bytes32):(bytes)", [
      ethereum.Value.fromFixedBytes(dataKey)
    ]);

    return result[0].toBytes();
  }

  try_getData(dataKey: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getData", "getData(bytes32):(bytes)", [
      ethereum.Value.fromFixedBytes(dataKey)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getDataBatch(dataKeys: Array<Bytes>): Array<Bytes> {
    let result = super.call(
      "getDataBatch",
      "getDataBatch(bytes32[]):(bytes[])",
      [ethereum.Value.fromFixedBytesArray(dataKeys)]
    );

    return result[0].toBytesArray();
  }

  try_getDataBatch(dataKeys: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getDataBatch",
      "getDataBatch(bytes32[]):(bytes[])",
      [ethereum.Value.fromFixedBytesArray(dataKeys)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getDataBatchForTokenIds(
    tokenIds: Array<Bytes>,
    dataKeys: Array<Bytes>
  ): Array<Bytes> {
    let result = super.call(
      "getDataBatchForTokenIds",
      "getDataBatchForTokenIds(bytes32[],bytes32[]):(bytes[])",
      [
        ethereum.Value.fromFixedBytesArray(tokenIds),
        ethereum.Value.fromFixedBytesArray(dataKeys)
      ]
    );

    return result[0].toBytesArray();
  }

  try_getDataBatchForTokenIds(
    tokenIds: Array<Bytes>,
    dataKeys: Array<Bytes>
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getDataBatchForTokenIds",
      "getDataBatchForTokenIds(bytes32[],bytes32[]):(bytes[])",
      [
        ethereum.Value.fromFixedBytesArray(tokenIds),
        ethereum.Value.fromFixedBytesArray(dataKeys)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getDataForTokenId(tokenId: Bytes, dataKey: Bytes): Bytes {
    let result = super.call(
      "getDataForTokenId",
      "getDataForTokenId(bytes32,bytes32):(bytes)",
      [
        ethereum.Value.fromFixedBytes(tokenId),
        ethereum.Value.fromFixedBytes(dataKey)
      ]
    );

    return result[0].toBytes();
  }

  try_getDataForTokenId(
    tokenId: Bytes,
    dataKey: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDataForTokenId",
      "getDataForTokenId(bytes32,bytes32):(bytes)",
      [
        ethereum.Value.fromFixedBytes(tokenId),
        ethereum.Value.fromFixedBytes(dataKey)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getOperatorsOf(tokenId: Bytes): Array<Address> {
    let result = super.call(
      "getOperatorsOf",
      "getOperatorsOf(bytes32):(address[])",
      [ethereum.Value.fromFixedBytes(tokenId)]
    );

    return result[0].toAddressArray();
  }

  try_getOperatorsOf(tokenId: Bytes): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getOperatorsOf",
      "getOperatorsOf(bytes32):(address[])",
      [ethereum.Value.fromFixedBytes(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getOrderPrice(order: ApexDeities__getOrderPriceInputOrderStruct): BigInt {
    let result = super.call(
      "getOrderPrice",
      "getOrderPrice((uint8,uint8,uint8,uint8)):(uint256)",
      [ethereum.Value.fromTuple(order)]
    );

    return result[0].toBigInt();
  }

  try_getOrderPrice(
    order: ApexDeities__getOrderPriceInputOrderStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOrderPrice",
      "getOrderPrice((uint8,uint8,uint8,uint8)):(uint256)",
      [ethereum.Value.fromTuple(order)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOperatorFor(operator: Address, tokenId: Bytes): boolean {
    let result = super.call(
      "isOperatorFor",
      "isOperatorFor(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromFixedBytes(tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isOperatorFor(
    operator: Address,
    tokenId: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOperatorFor",
      "isOperatorFor(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromFixedBytes(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sTierMinted(): BigInt {
    let result = super.call("sTierMinted", "sTierMinted():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sTierMinted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sTierMinted", "sTierMinted():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenIdsOf(tokenOwner: Address): Array<Bytes> {
    let result = super.call("tokenIdsOf", "tokenIdsOf(address):(bytes32[])", [
      ethereum.Value.fromAddress(tokenOwner)
    ]);

    return result[0].toBytesArray();
  }

  try_tokenIdsOf(tokenOwner: Address): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "tokenIdsOf",
      "tokenIdsOf(address):(bytes32[])",
      [ethereum.Value.fromAddress(tokenOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  tokenOwnerOf(tokenId: Bytes): Address {
    let result = super.call("tokenOwnerOf", "tokenOwnerOf(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_tokenOwnerOf(tokenId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenOwnerOf",
      "tokenOwnerOf(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenTier(tokenId: BigInt): i32 {
    let result = super.call("tokenTier", "tokenTier(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toI32();
  }

  try_tokenTier(tokenId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("tokenTier", "tokenTier(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initialOwner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AuthorizeOperatorCall extends ethereum.Call {
  get inputs(): AuthorizeOperatorCall__Inputs {
    return new AuthorizeOperatorCall__Inputs(this);
  }

  get outputs(): AuthorizeOperatorCall__Outputs {
    return new AuthorizeOperatorCall__Outputs(this);
  }
}

export class AuthorizeOperatorCall__Inputs {
  _call: AuthorizeOperatorCall;

  constructor(call: AuthorizeOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get operatorNotificationData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AuthorizeOperatorCall__Outputs {
  _call: AuthorizeOperatorCall;

  constructor(call: AuthorizeOperatorCall) {
    this._call = call;
  }
}

export class BatchCallsCall extends ethereum.Call {
  get inputs(): BatchCallsCall__Inputs {
    return new BatchCallsCall__Inputs(this);
  }

  get outputs(): BatchCallsCall__Outputs {
    return new BatchCallsCall__Outputs(this);
  }
}

export class BatchCallsCall__Inputs {
  _call: BatchCallsCall;

  constructor(call: BatchCallsCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class BatchCallsCall__Outputs {
  _call: BatchCallsCall;

  constructor(call: BatchCallsCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get order(): MintCallOrderStruct {
    return changetype<MintCallOrderStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintCallOrderStruct extends ethereum.Tuple {
  get sTierAmount(): i32 {
    return this[0].toI32();
  }

  get aTierAmount(): i32 {
    return this[1].toI32();
  }

  get bTierAmount(): i32 {
    return this[2].toI32();
  }

  get cTierAmount(): i32 {
    return this[3].toI32();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RevokeOperatorCall extends ethereum.Call {
  get inputs(): RevokeOperatorCall__Inputs {
    return new RevokeOperatorCall__Inputs(this);
  }

  get outputs(): RevokeOperatorCall__Outputs {
    return new RevokeOperatorCall__Outputs(this);
  }
}

export class RevokeOperatorCall__Inputs {
  _call: RevokeOperatorCall;

  constructor(call: RevokeOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get notify(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get operatorNotificationData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class RevokeOperatorCall__Outputs {
  _call: RevokeOperatorCall;

  constructor(call: RevokeOperatorCall) {
    this._call = call;
  }
}

export class SetDataCall extends ethereum.Call {
  get inputs(): SetDataCall__Inputs {
    return new SetDataCall__Inputs(this);
  }

  get outputs(): SetDataCall__Outputs {
    return new SetDataCall__Outputs(this);
  }
}

export class SetDataCall__Inputs {
  _call: SetDataCall;

  constructor(call: SetDataCall) {
    this._call = call;
  }

  get dataKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get dataValue(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetDataCall__Outputs {
  _call: SetDataCall;

  constructor(call: SetDataCall) {
    this._call = call;
  }
}

export class SetDataBatchCall extends ethereum.Call {
  get inputs(): SetDataBatchCall__Inputs {
    return new SetDataBatchCall__Inputs(this);
  }

  get outputs(): SetDataBatchCall__Outputs {
    return new SetDataBatchCall__Outputs(this);
  }
}

export class SetDataBatchCall__Inputs {
  _call: SetDataBatchCall;

  constructor(call: SetDataBatchCall) {
    this._call = call;
  }

  get dataKeys(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get dataValues(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class SetDataBatchCall__Outputs {
  _call: SetDataBatchCall;

  constructor(call: SetDataBatchCall) {
    this._call = call;
  }
}

export class SetDataBatchForTokenIdsCall extends ethereum.Call {
  get inputs(): SetDataBatchForTokenIdsCall__Inputs {
    return new SetDataBatchForTokenIdsCall__Inputs(this);
  }

  get outputs(): SetDataBatchForTokenIdsCall__Outputs {
    return new SetDataBatchForTokenIdsCall__Outputs(this);
  }
}

export class SetDataBatchForTokenIdsCall__Inputs {
  _call: SetDataBatchForTokenIdsCall;

  constructor(call: SetDataBatchForTokenIdsCall) {
    this._call = call;
  }

  get tokenIds(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get dataKeys(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get dataValues(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class SetDataBatchForTokenIdsCall__Outputs {
  _call: SetDataBatchForTokenIdsCall;

  constructor(call: SetDataBatchForTokenIdsCall) {
    this._call = call;
  }
}

export class SetDataForTokenIdCall extends ethereum.Call {
  get inputs(): SetDataForTokenIdCall__Inputs {
    return new SetDataForTokenIdCall__Inputs(this);
  }

  get outputs(): SetDataForTokenIdCall__Outputs {
    return new SetDataForTokenIdCall__Outputs(this);
  }
}

export class SetDataForTokenIdCall__Inputs {
  _call: SetDataForTokenIdCall;

  constructor(call: SetDataForTokenIdCall) {
    this._call = call;
  }

  get tokenId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get dataKey(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get dataValue(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SetDataForTokenIdCall__Outputs {
  _call: SetDataForTokenIdCall;

  constructor(call: SetDataForTokenIdCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get force(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TransferBatchCall extends ethereum.Call {
  get inputs(): TransferBatchCall__Inputs {
    return new TransferBatchCall__Inputs(this);
  }

  get outputs(): TransferBatchCall__Outputs {
    return new TransferBatchCall__Outputs(this);
  }
}

export class TransferBatchCall__Inputs {
  _call: TransferBatchCall;

  constructor(call: TransferBatchCall) {
    this._call = call;
  }

  get from(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get to(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get tokenId(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get force(): Array<boolean> {
    return this._call.inputValues[3].value.toBooleanArray();
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }
}

export class TransferBatchCall__Outputs {
  _call: TransferBatchCall;

  constructor(call: TransferBatchCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
