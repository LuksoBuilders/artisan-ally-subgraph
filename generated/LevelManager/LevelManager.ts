// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LevelIncreased extends ethereum.Event {
  get params(): LevelIncreased__Params {
    return new LevelIncreased__Params(this);
  }
}

export class LevelIncreased__Params {
  _event: LevelIncreased;

  constructor(event: LevelIncreased) {
    this._event = event;
  }

  get deityId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lvls(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newLevel(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class XPIncreased extends ethereum.Event {
  get params(): XPIncreased__Params {
    return new XPIncreased__Params(this);
  }
}

export class XPIncreased__Params {
  _event: XPIncreased;

  constructor(event: XPIncreased) {
    this._event = event;
  }

  get deityId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LevelManager extends ethereum.SmartContract {
  static bind(address: Address): LevelManager {
    return new LevelManager("LevelManager", address);
  }

  CALCULATION_DENOMINATOR(): BigInt {
    let result = super.call(
      "CALCULATION_DENOMINATOR",
      "CALCULATION_DENOMINATOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_CALCULATION_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CALCULATION_DENOMINATOR",
      "CALCULATION_DENOMINATOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  EXPERIENCE_MANIPULATOR(): Bytes {
    let result = super.call(
      "EXPERIENCE_MANIPULATOR",
      "EXPERIENCE_MANIPULATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_EXPERIENCE_MANIPULATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "EXPERIENCE_MANIPULATOR",
      "EXPERIENCE_MANIPULATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      []
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  _experienceLevelIncreaseNumerator(): BigInt {
    let result = super.call(
      "_experienceLevelIncreaseNumerator",
      "_experienceLevelIncreaseNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__experienceLevelIncreaseNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_experienceLevelIncreaseNumerator",
      "_experienceLevelIncreaseNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deityLevels(param0: BigInt): BigInt {
    let result = super.call("deityLevels", "deityLevels(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_deityLevels(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deityLevels",
      "deityLevels(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deityXPs(param0: BigInt): BigInt {
    let result = super.call("deityXPs", "deityXPs(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_deityXPs(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deityXPs", "deityXPs(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  experienceLevels(param0: BigInt): BigInt {
    let result = super.call(
      "experienceLevels",
      "experienceLevels(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_experienceLevels(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "experienceLevels",
      "experienceLevels(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDeityLevel(tokenId: BigInt): BigInt {
    let result = super.call(
      "getDeityLevel",
      "getDeityLevel(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getDeityLevel(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDeityLevel",
      "getDeityLevel(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDeityXP(tokenId: BigInt): BigInt {
    let result = super.call("getDeityXP", "getDeityXP(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_getDeityXP(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getDeityXP", "getDeityXP(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExperienceLevel(index: BigInt): BigInt {
    let result = super.call(
      "getExperienceLevel",
      "getExperienceLevel(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toBigInt();
  }

  try_getExperienceLevel(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExperienceLevel",
      "getExperienceLevel(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExperienceLevelIncreaseNumerator(): BigInt {
    let result = super.call(
      "getExperienceLevelIncreaseNumerator",
      "getExperienceLevelIncreaseNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getExperienceLevelIncreaseNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExperienceLevelIncreaseNumerator",
      "getExperienceLevelIncreaseNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTotalExperienceLevel(index: BigInt): BigInt {
    let result = super.call(
      "getTotalExperienceLevel",
      "getTotalExperienceLevel(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toBigInt();
  }

  try_getTotalExperienceLevel(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalExperienceLevel",
      "getTotalExperienceLevel(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  setNextExperienceLevel(): BigInt {
    let result = super.call(
      "setNextExperienceLevel",
      "setNextExperienceLevel():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_setNextExperienceLevel(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "setNextExperienceLevel",
      "setNextExperienceLevel():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalExperienceLevels(param0: BigInt): BigInt {
    let result = super.call(
      "totalExperienceLevels",
      "totalExperienceLevels(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalExperienceLevels(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalExperienceLevels",
      "totalExperienceLevels(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class IncreaseXPCall extends ethereum.Call {
  get inputs(): IncreaseXPCall__Inputs {
    return new IncreaseXPCall__Inputs(this);
  }

  get outputs(): IncreaseXPCall__Outputs {
    return new IncreaseXPCall__Outputs(this);
  }
}

export class IncreaseXPCall__Inputs {
  _call: IncreaseXPCall;

  constructor(call: IncreaseXPCall) {
    this._call = call;
  }

  get deityId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseXPCall__Outputs {
  _call: IncreaseXPCall;

  constructor(call: IncreaseXPCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get defaultAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get experienceManipulator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get initialLevelExperience(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get experienceLevelIncreaseNumerator(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get callerConfirmation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetNextExperienceLevelCall extends ethereum.Call {
  get inputs(): SetNextExperienceLevelCall__Inputs {
    return new SetNextExperienceLevelCall__Inputs(this);
  }

  get outputs(): SetNextExperienceLevelCall__Outputs {
    return new SetNextExperienceLevelCall__Outputs(this);
  }
}

export class SetNextExperienceLevelCall__Inputs {
  _call: SetNextExperienceLevelCall;

  constructor(call: SetNextExperienceLevelCall) {
    this._call = call;
  }
}

export class SetNextExperienceLevelCall__Outputs {
  _call: SetNextExperienceLevelCall;

  constructor(call: SetNextExperienceLevelCall) {
    this._call = call;
  }

  get experience(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
