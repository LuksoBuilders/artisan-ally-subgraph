// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BackerBuckPricesChange extends ethereum.Event {
  get params(): BackerBuckPricesChange__Params {
    return new BackerBuckPricesChange__Params(this);
  }
}

export class BackerBuckPricesChange__Params {
  _event: BackerBuckPricesChange;

  constructor(event: BackerBuckPricesChange) {
    this._event = event;
  }

  get backerbuckInitialPrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get backerbuckPriceGrowth(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DataChanged extends ethereum.Event {
  get params(): DataChanged__Params {
    return new DataChanged__Params(this);
  }
}

export class DataChanged__Params {
  _event: DataChanged;

  constructor(event: DataChanged) {
    this._event = event;
  }

  get dataKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dataValue(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class FellowshipFounded extends ethereum.Event {
  get params(): FellowshipFounded__Params {
    return new FellowshipFounded__Params(this);
  }
}

export class FellowshipFounded__Params {
  _event: FellowshipFounded;

  constructor(event: FellowshipFounded) {
    this._event = event;
  }

  get fellowship(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deityId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get artisan(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get initialPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get priceGrowth(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OperatorAuthorizationChanged extends ethereum.Event {
  get params(): OperatorAuthorizationChanged__Params {
    return new OperatorAuthorizationChanged__Params(this);
  }
}

export class OperatorAuthorizationChanged__Params {
  _event: OperatorAuthorizationChanged;

  constructor(event: OperatorAuthorizationChanged) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get operatorNotificationData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class OperatorRevoked extends ethereum.Event {
  get params(): OperatorRevoked__Params {
    return new OperatorRevoked__Params(this);
  }
}

export class OperatorRevoked__Params {
  _event: OperatorRevoked;

  constructor(event: OperatorRevoked) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get notified(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get operatorNotificationData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SystemFeeShareChange extends ethereum.Event {
  get params(): SystemFeeShareChange__Params {
    return new SystemFeeShareChange__Params(this);
  }
}

export class SystemFeeShareChange__Params {
  _event: SystemFeeShareChange;

  constructor(event: SystemFeeShareChange) {
    this._event = event;
  }

  get newSystemFeeShare(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TokenIdDataChanged extends ethereum.Event {
  get params(): TokenIdDataChanged__Params {
    return new TokenIdDataChanged__Params(this);
  }
}

export class TokenIdDataChanged__Params {
  _event: TokenIdDataChanged;

  constructor(event: TokenIdDataChanged) {
    this._event = event;
  }

  get tokenId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dataKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get dataValue(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get force(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get data(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ArtisanAllyV2 extends ethereum.SmartContract {
  static bind(address: Address): ArtisanAllyV2 {
    return new ArtisanAllyV2("ArtisanAllyV2", address);
  }

  CALCULATION_DENOMINATOR(): BigInt {
    let result = super.call(
      "CALCULATION_DENOMINATOR",
      "CALCULATION_DENOMINATOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_CALCULATION_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CALCULATION_DENOMINATOR",
      "CALCULATION_DENOMINATOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  EARLY_ACCESS(): BigInt {
    let result = super.call("EARLY_ACCESS", "EARLY_ACCESS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_EARLY_ACCESS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("EARLY_ACCESS", "EARLY_ACCESS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      []
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  _apexDeities(): Address {
    let result = super.call("_apexDeities", "_apexDeities():(address)", []);

    return result[0].toAddress();
  }

  try__apexDeities(): ethereum.CallResult<Address> {
    let result = super.tryCall("_apexDeities", "_apexDeities():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _backerbuckInitialPrice(): BigInt {
    let result = super.call(
      "_backerbuckInitialPrice",
      "_backerbuckInitialPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__backerbuckInitialPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_backerbuckInitialPrice",
      "_backerbuckInitialPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _backerbuckPriceGrowth(): BigInt {
    let result = super.call(
      "_backerbuckPriceGrowth",
      "_backerbuckPriceGrowth():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__backerbuckPriceGrowth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_backerbuckPriceGrowth",
      "_backerbuckPriceGrowth():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _beaconProxyFactory(): Address {
    let result = super.call(
      "_beaconProxyFactory",
      "_beaconProxyFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__beaconProxyFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_beaconProxyFactory",
      "_beaconProxyFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _contributionBeacon(): Address {
    let result = super.call(
      "_contributionBeacon",
      "_contributionBeacon():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__contributionBeacon(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_contributionBeacon",
      "_contributionBeacon():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _endorsementBeacon(): Address {
    let result = super.call(
      "_endorsementBeacon",
      "_endorsementBeacon():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__endorsementBeacon(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_endorsementBeacon",
      "_endorsementBeacon():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _feeCollector(): Address {
    let result = super.call("_feeCollector", "_feeCollector():(address)", []);

    return result[0].toAddress();
  }

  try__feeCollector(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_feeCollector",
      "_feeCollector():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _fellowshipBeacon(): Address {
    let result = super.call(
      "_fellowshipBeacon",
      "_fellowshipBeacon():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__fellowshipBeacon(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_fellowshipBeacon",
      "_fellowshipBeacon():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _holyShitAddress(): Address {
    let result = super.call(
      "_holyShitAddress",
      "_holyShitAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__holyShitAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_holyShitAddress",
      "_holyShitAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _slotManager(): Address {
    let result = super.call("_slotManager", "_slotManager():(address)", []);

    return result[0].toAddress();
  }

  try__slotManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("_slotManager", "_slotManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _systemFeeShare(): BigInt {
    let result = super.call(
      "_systemFeeShare",
      "_systemFeeShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__systemFeeShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_systemFeeShare",
      "_systemFeeShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(tokenOwner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(tokenOwner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(tokenOwner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(tokenOwner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  batchCalls(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("batchCalls", "batchCalls(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_batchCalls(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("batchCalls", "batchCalls(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getData(dataKey: Bytes): Bytes {
    let result = super.call("getData", "getData(bytes32):(bytes)", [
      ethereum.Value.fromFixedBytes(dataKey)
    ]);

    return result[0].toBytes();
  }

  try_getData(dataKey: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getData", "getData(bytes32):(bytes)", [
      ethereum.Value.fromFixedBytes(dataKey)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getDataBatch(dataKeys: Array<Bytes>): Array<Bytes> {
    let result = super.call(
      "getDataBatch",
      "getDataBatch(bytes32[]):(bytes[])",
      [ethereum.Value.fromFixedBytesArray(dataKeys)]
    );

    return result[0].toBytesArray();
  }

  try_getDataBatch(dataKeys: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getDataBatch",
      "getDataBatch(bytes32[]):(bytes[])",
      [ethereum.Value.fromFixedBytesArray(dataKeys)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getDataBatchForTokenIds(
    tokenIds: Array<Bytes>,
    dataKeys: Array<Bytes>
  ): Array<Bytes> {
    let result = super.call(
      "getDataBatchForTokenIds",
      "getDataBatchForTokenIds(bytes32[],bytes32[]):(bytes[])",
      [
        ethereum.Value.fromFixedBytesArray(tokenIds),
        ethereum.Value.fromFixedBytesArray(dataKeys)
      ]
    );

    return result[0].toBytesArray();
  }

  try_getDataBatchForTokenIds(
    tokenIds: Array<Bytes>,
    dataKeys: Array<Bytes>
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getDataBatchForTokenIds",
      "getDataBatchForTokenIds(bytes32[],bytes32[]):(bytes[])",
      [
        ethereum.Value.fromFixedBytesArray(tokenIds),
        ethereum.Value.fromFixedBytesArray(dataKeys)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getDataForTokenId(tokenId: Bytes, dataKey: Bytes): Bytes {
    let result = super.call(
      "getDataForTokenId",
      "getDataForTokenId(bytes32,bytes32):(bytes)",
      [
        ethereum.Value.fromFixedBytes(tokenId),
        ethereum.Value.fromFixedBytes(dataKey)
      ]
    );

    return result[0].toBytes();
  }

  try_getDataForTokenId(
    tokenId: Bytes,
    dataKey: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDataForTokenId",
      "getDataForTokenId(bytes32,bytes32):(bytes)",
      [
        ethereum.Value.fromFixedBytes(tokenId),
        ethereum.Value.fromFixedBytes(dataKey)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getFellowshipTokenId(fellowship: Address): Bytes {
    let result = super.call(
      "getFellowshipTokenId",
      "getFellowshipTokenId(address):(bytes32)",
      [ethereum.Value.fromAddress(fellowship)]
    );

    return result[0].toBytes();
  }

  try_getFellowshipTokenId(fellowship: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getFellowshipTokenId",
      "getFellowshipTokenId(address):(bytes32)",
      [ethereum.Value.fromAddress(fellowship)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getOperatorsOf(tokenId: Bytes): Array<Address> {
    let result = super.call(
      "getOperatorsOf",
      "getOperatorsOf(bytes32):(address[])",
      [ethereum.Value.fromFixedBytes(tokenId)]
    );

    return result[0].toAddressArray();
  }

  try_getOperatorsOf(tokenId: Bytes): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getOperatorsOf",
      "getOperatorsOf(bytes32):(address[])",
      [ethereum.Value.fromFixedBytes(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOperatorFor(operator: Address, tokenId: Bytes): boolean {
    let result = super.call(
      "isOperatorFor",
      "isOperatorFor(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromFixedBytes(tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isOperatorFor(
    operator: Address,
    tokenId: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOperatorFor",
      "isOperatorFor(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromFixedBytes(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenIdsOf(tokenOwner: Address): Array<Bytes> {
    let result = super.call("tokenIdsOf", "tokenIdsOf(address):(bytes32[])", [
      ethereum.Value.fromAddress(tokenOwner)
    ]);

    return result[0].toBytesArray();
  }

  try_tokenIdsOf(tokenOwner: Address): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "tokenIdsOf",
      "tokenIdsOf(address):(bytes32[])",
      [ethereum.Value.fromAddress(tokenOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  tokenOwnerOf(tokenId: Bytes): Address {
    let result = super.call("tokenOwnerOf", "tokenOwnerOf(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_tokenOwnerOf(tokenId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenOwnerOf",
      "tokenOwnerOf(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AuthorizeOperatorCall extends ethereum.Call {
  get inputs(): AuthorizeOperatorCall__Inputs {
    return new AuthorizeOperatorCall__Inputs(this);
  }

  get outputs(): AuthorizeOperatorCall__Outputs {
    return new AuthorizeOperatorCall__Outputs(this);
  }
}

export class AuthorizeOperatorCall__Inputs {
  _call: AuthorizeOperatorCall;

  constructor(call: AuthorizeOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get operatorNotificationData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AuthorizeOperatorCall__Outputs {
  _call: AuthorizeOperatorCall;

  constructor(call: AuthorizeOperatorCall) {
    this._call = call;
  }
}

export class BatchCallsCall extends ethereum.Call {
  get inputs(): BatchCallsCall__Inputs {
    return new BatchCallsCall__Inputs(this);
  }

  get outputs(): BatchCallsCall__Outputs {
    return new BatchCallsCall__Outputs(this);
  }
}

export class BatchCallsCall__Inputs {
  _call: BatchCallsCall;

  constructor(call: BatchCallsCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class BatchCallsCall__Outputs {
  _call: BatchCallsCall;

  constructor(call: BatchCallsCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class ChangeBackerBuckPriceCall extends ethereum.Call {
  get inputs(): ChangeBackerBuckPriceCall__Inputs {
    return new ChangeBackerBuckPriceCall__Inputs(this);
  }

  get outputs(): ChangeBackerBuckPriceCall__Outputs {
    return new ChangeBackerBuckPriceCall__Outputs(this);
  }
}

export class ChangeBackerBuckPriceCall__Inputs {
  _call: ChangeBackerBuckPriceCall;

  constructor(call: ChangeBackerBuckPriceCall) {
    this._call = call;
  }

  get backerbuckInitialPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get backerbuckPriceGrowth(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeBackerBuckPriceCall__Outputs {
  _call: ChangeBackerBuckPriceCall;

  constructor(call: ChangeBackerBuckPriceCall) {
    this._call = call;
  }
}

export class ChangeSystemFeeShareCall extends ethereum.Call {
  get inputs(): ChangeSystemFeeShareCall__Inputs {
    return new ChangeSystemFeeShareCall__Inputs(this);
  }

  get outputs(): ChangeSystemFeeShareCall__Outputs {
    return new ChangeSystemFeeShareCall__Outputs(this);
  }
}

export class ChangeSystemFeeShareCall__Inputs {
  _call: ChangeSystemFeeShareCall;

  constructor(call: ChangeSystemFeeShareCall) {
    this._call = call;
  }

  get newSystemFeeShare(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeSystemFeeShareCall__Outputs {
  _call: ChangeSystemFeeShareCall;

  constructor(call: ChangeSystemFeeShareCall) {
    this._call = call;
  }
}

export class FoundFellowshipCall extends ethereum.Call {
  get inputs(): FoundFellowshipCall__Inputs {
    return new FoundFellowshipCall__Inputs(this);
  }

  get outputs(): FoundFellowshipCall__Outputs {
    return new FoundFellowshipCall__Outputs(this);
  }
}

export class FoundFellowshipCall__Inputs {
  _call: FoundFellowshipCall;

  constructor(call: FoundFellowshipCall) {
    this._call = call;
  }

  get deityId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get slot(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get artisan(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class FoundFellowshipCall__Outputs {
  _call: FoundFellowshipCall;

  constructor(call: FoundFellowshipCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get defaultAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fellowshipBeacon(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get beaconProxyFactory(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get apexDeities(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get slotManager(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get feeCollector(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get holyShitAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get contributionBeacon(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get endorsementBeacon(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get callerConfirmation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeOperatorCall extends ethereum.Call {
  get inputs(): RevokeOperatorCall__Inputs {
    return new RevokeOperatorCall__Inputs(this);
  }

  get outputs(): RevokeOperatorCall__Outputs {
    return new RevokeOperatorCall__Outputs(this);
  }
}

export class RevokeOperatorCall__Inputs {
  _call: RevokeOperatorCall;

  constructor(call: RevokeOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get notify(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get operatorNotificationData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class RevokeOperatorCall__Outputs {
  _call: RevokeOperatorCall;

  constructor(call: RevokeOperatorCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetDataCall extends ethereum.Call {
  get inputs(): SetDataCall__Inputs {
    return new SetDataCall__Inputs(this);
  }

  get outputs(): SetDataCall__Outputs {
    return new SetDataCall__Outputs(this);
  }
}

export class SetDataCall__Inputs {
  _call: SetDataCall;

  constructor(call: SetDataCall) {
    this._call = call;
  }

  get dataKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get dataValue(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetDataCall__Outputs {
  _call: SetDataCall;

  constructor(call: SetDataCall) {
    this._call = call;
  }
}

export class SetDataBatchCall extends ethereum.Call {
  get inputs(): SetDataBatchCall__Inputs {
    return new SetDataBatchCall__Inputs(this);
  }

  get outputs(): SetDataBatchCall__Outputs {
    return new SetDataBatchCall__Outputs(this);
  }
}

export class SetDataBatchCall__Inputs {
  _call: SetDataBatchCall;

  constructor(call: SetDataBatchCall) {
    this._call = call;
  }

  get dataKeys(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get dataValues(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class SetDataBatchCall__Outputs {
  _call: SetDataBatchCall;

  constructor(call: SetDataBatchCall) {
    this._call = call;
  }
}

export class SetDataBatchForTokenIdsCall extends ethereum.Call {
  get inputs(): SetDataBatchForTokenIdsCall__Inputs {
    return new SetDataBatchForTokenIdsCall__Inputs(this);
  }

  get outputs(): SetDataBatchForTokenIdsCall__Outputs {
    return new SetDataBatchForTokenIdsCall__Outputs(this);
  }
}

export class SetDataBatchForTokenIdsCall__Inputs {
  _call: SetDataBatchForTokenIdsCall;

  constructor(call: SetDataBatchForTokenIdsCall) {
    this._call = call;
  }

  get tokenIds(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get dataKeys(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get dataValues(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class SetDataBatchForTokenIdsCall__Outputs {
  _call: SetDataBatchForTokenIdsCall;

  constructor(call: SetDataBatchForTokenIdsCall) {
    this._call = call;
  }
}

export class SetDataForTokenIdCall extends ethereum.Call {
  get inputs(): SetDataForTokenIdCall__Inputs {
    return new SetDataForTokenIdCall__Inputs(this);
  }

  get outputs(): SetDataForTokenIdCall__Outputs {
    return new SetDataForTokenIdCall__Outputs(this);
  }
}

export class SetDataForTokenIdCall__Inputs {
  _call: SetDataForTokenIdCall;

  constructor(call: SetDataForTokenIdCall) {
    this._call = call;
  }

  get tokenId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get dataKey(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get dataValue(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SetDataForTokenIdCall__Outputs {
  _call: SetDataForTokenIdCall;

  constructor(call: SetDataForTokenIdCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get force(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TransferBatchCall extends ethereum.Call {
  get inputs(): TransferBatchCall__Inputs {
    return new TransferBatchCall__Inputs(this);
  }

  get outputs(): TransferBatchCall__Outputs {
    return new TransferBatchCall__Outputs(this);
  }
}

export class TransferBatchCall__Inputs {
  _call: TransferBatchCall;

  constructor(call: TransferBatchCall) {
    this._call = call;
  }

  get from(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get to(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get tokenId(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get force(): Array<boolean> {
    return this._call.inputValues[3].value.toBooleanArray();
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }
}

export class TransferBatchCall__Outputs {
  _call: TransferBatchCall;

  constructor(call: TransferBatchCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
